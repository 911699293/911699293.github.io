{"meta":{"title":"Lucas的博客","subtitle":"Lucas的博客","description":"","author":"Lucas Yuan","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-02-23T06:45:42.000Z","updated":"2020-02-23T06:46:22.063Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-02-23T06:43:22.000Z","updated":"2020-02-23T06:44:01.350Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-02-23T06:46:36.000Z","updated":"2020-02-23T06:46:49.344Z","comments":true,"path":"contact/index.html","permalink":"http://yoursite.com/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-02-23T06:47:06.000Z","updated":"2020-02-23T06:47:22.234Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-23T06:45:15.000Z","updated":"2020-02-23T06:45:26.072Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"DDA直线算法","slug":"DDA直线算法","date":"2020-02-25T03:03:03.929Z","updated":"2020-02-25T03:05:05.462Z","comments":true,"path":"2020/02/25/DDA直线算法/","link":"","permalink":"http://yoursite.com/2020/02/25/DDA%E7%9B%B4%E7%BA%BF%E7%AE%97%E6%B3%95/","excerpt":"","text":"DDA算法生成直线——C# 一、基础知识&nbsp;&nbsp;在计算机中，直线的显示并不是连续的，而是离散的点，这是由光栅化的本之决定的。&nbsp;&nbsp;我们可以把屏幕理解为阴极射线管光栅显示器，这个显示器是由离散可发光的有线区域单元(像素)组成的矩阵。确定最佳逼近某直线的像素的过程通常叫做光栅化。对于水平线、垂直线以及45°线，选择哪些光栅元素是显而易见的，而对于其他方向的直线，像素的选择就很困难。如下图，对于中间的那幅图而言，我们不知道问号区域到底是上面填充颜色还是下面填充颜色： 二、那么一个画线的算法需要满组哪些条件？ 直线应该外观笔直，并且要有最精确的起点和终点 直线的亮度应该保持不变，且与直线的长度和方向无关 直线在生成的时候速度要快三、DDA算法——digital differentialanalyzer，数字微分析法1.直线DDA算法思想：&nbsp;&nbsp;其实质是选定x方向和y方向上增加量较大者作为步进方向，取该方向上的增量为一个像素单位，然后利用公式计算另一个方向的增量，吧每次计算出的(xi+1，yi+1)经过取整后送到显示器上输出，就会得到扫描转换之后的直线。&nbsp;&nbsp;之所以取两个方向中较大者作为步进方向，是考虑着线段分布的像素应均匀。2.DDA算法的实现： 已知直线的两端点的坐标：(x1,y1),(x2,y2)[此例中用随机函数生成两坐标]； 已知画线的颜色：color； 计算出两个方向的变化量： 12k=Math.Abs(x2 - x1) ;k=Math.Abs(y2 - y1) ; 计算出两个方向最大变化量： 123 k = Math.Abs(x2 - x1); if (Math.Abs(y2 - y1) &gt; k) k = Math.Abs(y2 - y1); 计算两个方向的增量： 123xincre = (float)(x2 - x1) / (float)(k);yincre = (float)(y2 - y1) / (float)(k); 设置初始像素坐标： 12x = x1;y = y1; 利用循环实现直线的绘制： 1234567 for (i = 0; i &lt;= k; i++) &#123; //使用的是位图的SetPixel方法 myBmp.SetPixel((int)x, (int)y, c); x += xincre; y += yincre;&#125; 3.DDA算法的特点：&nbsp;&nbsp;该算法简单，容易实现，但是由于在循环中设计实数型的运算，因此，生成直线的速度较慢。","categories":[],"tags":[]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2020-02-22T13:06:22.000Z","updated":"2020-02-22T13:11:59.964Z","comments":true,"path":"2020/02/22/我的第一篇博客文章/","link":"","permalink":"http://yoursite.com/2020/02/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"我的第一篇博客文章内容 第二章内容 参考文献内容 www.lucasyuan.top","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-02-22T12:43:21.631Z","updated":"2020-02-22T12:43:21.631Z","comments":true,"path":"2020/02/22/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}